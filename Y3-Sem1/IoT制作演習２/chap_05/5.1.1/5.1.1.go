package main

import "fmt"

var (
	// 四則演算の例
	v1 = 2 + 3         // 5 （通常の加算）

	// 四則演算によるオーバーフローの例
	u1 uint8 = 255     // 255はuint8型の最大値
	v2       = u1 + 1  // オーバーフローのため変数v2に「0」が設定される
	u2 int8  = 127     // 127はint8型の最大値
	v3       = u2 + 1  // オーバーフローのため変数v3に「−128」が設定される

	// ビット演算の例
	u3 uint8 = 0xA3    // 「0xA3」を2進数で表記すると「10100011」
	u4 uint8 = 0x53    // 「0x53」を2進数で表記すると「01010011」

	v4 = u3 & u4       // 変数v4を2進数で表記すると「00000011」
	v5 = u3 | u4       // 変数v5を2進数で表記すると「11110011」
	v6 = u3 ^ u4       // 変数v6を2進数で表記すると「11110000」
	v7 = u3 &^ u4      // 変数v7を2進数で表記すると「10100000」
	v8 = ^u3           // 変数v8を2進数で表記すると「01011100」

	// シフト演算子の例（符号なし整数）
	v9  = u3 << 4      // 変数v9を2進数で表記すると「00110000」
	v10 = u3 >> 4      // 変数v10を2進数で表記すると「00001010」

	// シフト演算子の例（符号付き整数）
	i1  int8 = -0x5D   // int8型の「−0x5D」を2進数で表記すると「10100011」
	v11      = i1 << 4 // 変数v11を2進数で表記すると「00110000」
	v12      = i1 >> 4 // 変数v12を2進数で表記すると「11111010」、算術シフト

	// 型エラーの例（int型とuint型の演算）
	// i int = 1
	// u uint = 1
	// v = i + u
)

func main() {
	// 演算結果を出力
	fmt.Println(v1, v2, v3)
	fmt.Println(v4, v5, v6, v7, v8)
	fmt.Println(v9, v10)
	fmt.Println(v11, v12)

	// 演算した結果を同じ変数に代入する例
	v1 += 1
	fmt.Println(v1)
}
